from _typeshed import Incomplete
from collections.abc import Generator
from micropython import const as const

_SEP: str

def _mode_if_exists(path): ...
def _clean_segment(segment): ...

class Path:
    _path: Incomplete
    def __init__(self, *segments) -> None: ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other): ...
    def absolute(self): ...
    def resolve(self): ...
    def open(self, mode: str = "r", encoding: Incomplete | None = None): ...
    def exists(self): ...
    def mkdir(self, parents: bool = False, exist_ok: bool = False) -> None: ...
    def is_dir(self): ...
    def is_file(self): ...
    def _glob(self, path, pattern, recursive) -> Generator[Incomplete, Incomplete]: ...
    def glob(self, pattern):
        """Iterate over this subtree and yield all existing files (of any
        kind, including directories) matching the given relative pattern.

        Currently only supports a single "*" pattern.
        """

    def rglob(self, pattern): ...
    def stat(self): ...
    def read_bytes(self): ...
    def read_text(self, encoding: Incomplete | None = None): ...
    def rename(self, target) -> None: ...
    def rmdir(self) -> None: ...
    def touch(self, exist_ok: bool = True) -> None: ...
    def unlink(self, missing_ok: bool = False) -> None: ...
    def write_bytes(self, data) -> None: ...
    def write_text(self, data, encoding: Incomplete | None = None) -> None: ...
    def with_suffix(self, suffix): ...
    @property
    def stem(self): ...
    @property
    def parent(self): ...
    @property
    def name(self): ...
    @property
    def suffix(self): ...
