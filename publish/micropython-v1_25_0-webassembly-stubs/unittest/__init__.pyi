from _typeshed import Incomplete

class SkipTest(Exception): ...

class AssertRaisesContext:
    expected: Incomplete
    def __init__(self, exc) -> None: ...
    def __enter__(self): ...
    exception: Incomplete
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, tb: types.TracebackType | None): ...

__current_test__: Incomplete
__test_result__: Incomplete

class SubtestContext:
    msg: Incomplete
    params: Incomplete
    def __init__(self, msg: Incomplete | None = None, params: Incomplete | None = None) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *exc_info): ...

class NullContext:
    def __enter__(self) -> None: ...
    def __exit__(
        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None
    ) -> None: ...

class TestCase:
    def __init__(self) -> None: ...
    _cleanups: Incomplete
    def addCleanup(self, func, *args, **kwargs) -> None: ...
    def doCleanups(self) -> None: ...
    def subTest(self, msg: Incomplete | None = None, **params): ...
    def skipTest(self, reason) -> None: ...
    def fail(self, msg: str = "") -> None: ...
    def assertEqual(self, x, y, msg: str = "") -> None: ...
    def assertNotEqual(self, x, y, msg: str = "") -> None: ...
    def assertLessEqual(self, x, y, msg: Incomplete | None = None) -> None: ...
    def assertGreaterEqual(self, x, y, msg: Incomplete | None = None) -> None: ...
    def assertAlmostEqual(self, x, y, places: Incomplete | None = None, msg: str = "", delta: Incomplete | None = None) -> None: ...
    def assertNotAlmostEqual(self, x, y, places: Incomplete | None = None, msg: str = "", delta: Incomplete | None = None) -> None: ...
    def assertIs(self, x, y, msg: str = "") -> None: ...
    def assertIsNot(self, x, y, msg: str = "") -> None: ...
    def assertIsNone(self, x, msg: str = "") -> None: ...
    def assertIsNotNone(self, x, msg: str = "") -> None: ...
    def assertTrue(self, x, msg: str = "") -> None: ...
    def assertFalse(self, x, msg: str = "") -> None: ...
    def assertIn(self, x, y, msg: str = "") -> None: ...
    def assertIsInstance(self, x, y, msg: str = "") -> None: ...
    def assertRaises(self, exc, func: Incomplete | None = None, *args, **kwargs): ...
    def assertWarns(self, warn): ...

def skip(msg): ...
def skipIf(cond, msg): ...
def skipUnless(cond, msg): ...
def expectedFailure(test): ...

class TestSuite:
    _tests: Incomplete
    name: Incomplete
    def __init__(self, name: str = "") -> None: ...
    def addTest(self, cls) -> None: ...
    def run(self, result): ...
    def _load_module(self, mod) -> None: ...

class TestRunner:
    def run(self, suite: TestSuite): ...

TextTestRunner = TestRunner

class TestResult:
    errorsNum: int
    failuresNum: int
    skippedNum: int
    testsRun: int
    errors: Incomplete
    failures: Incomplete
    skipped: Incomplete
    _newFailures: int
    def __init__(self) -> None: ...
    def wasSuccessful(self): ...
    def printErrors(self) -> None: ...
    def printErrorList(self, lst) -> None: ...
    def __repr__(self) -> str: ...
    def __add__(self, other): ...

def _capture_exc(exc, exc_traceback): ...
def _handle_test_exception(current_test: tuple, test_result: TestResult, exc_info: tuple, verbose: bool = True): ...
def _run_suite(c, test_result: TestResult, suite_name: str = ""): ...
def main(module: str = "__main__", testRunner: Incomplete | None = None): ...
