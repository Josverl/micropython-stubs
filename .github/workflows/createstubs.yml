name: Createstubs

on: [push, workflow_dispatch]



jobs:
########################################################################################################################################
  list-versions:
    # 'Get a list of latest versions of micropython'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ./.github/actions/get-mpversions
        id: dynamic

      - run: echo ${{ steps.dynamic.outputs.json }}

    outputs:
      json: ${{ steps.dynamic.outputs.json }}

########################################################################################################################################

  createstubs:
    name: Createstubs ${{ matrix.version }}
    needs: list-versions
    runs-on: [self-hosted, mpremote, X64]
    env:
      ARCH: X64
      # ARCH: ARM64    
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: 
        version: ${{ fromJSON(needs.list-versions.outputs.json) }}

    #   matrix:
    #     version: [preview, v1.22.2]
    steps:
      - name: Checkout stubs repo
        uses: actions/checkout@v4

      - name: Set up Python (most platforms)
        if: ${{ env.ARCH != 'ARM64' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Python (Linux-ARM64)
        if: ${{ env.ARCH == 'ARM64' }}
        uses: deadsnakes/action@v2.1.1
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pipx install poetry
          pip install -U mpflash mpremote

      - name: Patch mpremote mip 
        run: patch /home/jos/actions-runner/_tools/Python/3.11.8/x64/lib/python3.11/site-packages/mpremote/mip.py /home/jos/mpremote_mip.patch -n
        
      - name: Get ${{ matrix.version }} firmwares for flashing
        run: |
          mpflash download --version ${{ matrix.version }}

      - name: Update firmware to ${{ matrix.version }} on all connected boards
        run: |
          mpflash flash --version ${{ matrix.version }}

      - name: clone Repos
        run: |
          stubber clone

      - run: git pull --ff-only

      - name: run board stubber
        continue-on-error: true # avoid stopping the workflow if no boards are detected
        run: |
          stubber get-mcu-stubs

      - name: Check if there are any changes
        id: verify_diff
        run: |
          git diff --quiet ./stubs ./publish || echo "changed=true" >> $GITHUB_OUTPUT
  
       
      - name: check in changes
        if: steps.verify_diff.outputs.changed == 'true' AND ${{ !env.ACT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email github-actions@github.com
          git pull
          git add ./stubs ./publish
          git commit --all -m "create boardstubs"
          git push



