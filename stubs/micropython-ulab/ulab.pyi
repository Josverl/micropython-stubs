import ulab
from typing import Any, Dict, Iterable, Iterator, List, Optional, Tuple, Union, overload

_DType = int
_float = float
_bool = bool
_Index = Union[int, slice, ulab.array, Tuple[Union[int, slice], ...]]

class array:
    def __init__(self, values: Union[array, Iterable[Union[_float, _bool, Iterable[Any]]]], *, dtype: _DType = ...) -> None: ...
    shape: Tuple[int, ...]
    size: int
    itemsize: int
    strides: Tuple[int, ...]
    def copy(self) -> ulab.array: ...
    def flatten(self, *, order: str = ...) -> ulab.array: ...
    def reshape(self, shape: Tuple[int, ...]) -> ulab.array: ...
    def sort(self, *, axis: Optional[int] = ...) -> None: ...
    def tobytes(self) -> bytearray: ...
    def transpose(self) -> ulab.array: ...
    def __add__(self, other: Union[array, _float]) -> ulab.array: ...
    def __radd__(self, other: _float) -> ulab.array: ...
    def __sub__(self, other: Union[array, _float]) -> ulab.array: ...
    def __rsub__(self, other: _float) -> ulab.array: ...
    def __mul__(self, other: Union[array, _float]) -> ulab.array: ...
    def __rmul__(self, other: _float) -> ulab.array: ...
    def __div__(self, other: Union[array, _float]) -> ulab.array: ...
    def __rdiv__(self, other: _float) -> ulab.array: ...
    def __pow__(self, other: Union[array, _float]) -> ulab.array: ...
    def __rpow__(self, other: _float) -> ulab.array: ...
    def __inv__(self) -> ulab.array: ...
    def __neg__(self) -> ulab.array: ...
    def __pos__(self) -> ulab.array: ...
    def __abs__(self) -> ulab.array: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: Union[array, _float]) -> ulab.array: ...
    def __le__(self, other: Union[array, _float]) -> ulab.array: ...
    def __gt__(self, other: Union[array, _float]) -> ulab.array: ...
    def __ge__(self, other: Union[array, _float]) -> ulab.array: ...
    def __iter__(self) -> Union[Iterator[array], Iterator[_float]]: ...
    def __getitem__(self, index: _Index) -> Union[array, _float]: ...
    def __setitem__(self, index: _Index, value: Union[array, _float]) -> None: ...
_ArrayLike = Union[array, List[_float], Tuple[_float], range]
int8: _DType
int16: _DType
float: _DType
uint8: _DType
uint16: _DType
bool: _DType

def get_printoptions() -> Dict[str, int]: ...
def set_printoptions(threshold: Optional[int] = ..., edgeitems: Optional[int] = ...) -> None: ...
def ndinfo(array: ulab.array) -> None: ...
@overload
def arange(stop: _float, step: _float = ..., *, dtype: _DType = ...) -> ulab.array: ...
@overload
def arange(start: _float, stop: _float, step: _float = ..., *, dtype: _DType = ...) -> ulab.array: ...
def concatenate(arrays: Tuple[ulab.array], *, axis: int = ...) -> ulab.array: ...
def diag(a: ulab.array, *, k: int = ...) -> ulab.array: ...
def eye(size: int, *, M: Optional[int] = ..., k: int = ..., dtype: _DType = ...) -> ulab.array: ...
def full(shape: Union[int, Tuple[int, ...]], fill_value: Union[_float, _bool], *, dtype: _DType = ...) -> ulab.array: ...
def linspace(start: _float, stop: _float, *, dtype: _DType = ..., num: int = ..., endpoint: _bool = ..., retstep: _bool = ...) -> ulab.array: ...
def logspace(start: _float, stop: _float, *, dtype: _DType = ..., num: int = ..., endpoint: _bool = ..., base: _float = ...) -> ulab.array: ...
def ones(shape: Union[int, Tuple[int, ...]], *, dtype: _DType = ...) -> ulab.array: ...
def zeros(shape: Union[int, Tuple[int, ...]], *, dtype: _DType = ...) -> ulab.array: ...
