import ulab
from typing import Callable, Optional, Union
from ulab import _ArrayLike as _ArrayLike, _DType as _DType

def acos(a: _ArrayLike) -> ulab.array: ...
def acosh(a: _ArrayLike) -> ulab.array: ...
def asin(a: _ArrayLike) -> ulab.array: ...
def asinh(a: _ArrayLike) -> ulab.array: ...
def around(a: _ArrayLike, *, decimals: int = ...) -> ulab.array: ...
def atan(a: _ArrayLike) -> ulab.array: ...
def arctan2(ya: _ArrayLike, xa: _ArrayLike) -> ulab.array: ...
def atanh(a: _ArrayLike) -> ulab.array: ...
def ceil(a: _ArrayLike) -> ulab.array: ...
def cos(a: _ArrayLike) -> ulab.array: ...
def cosh(a: _ArrayLike) -> ulab.array: ...
def degrees(a: _ArrayLike) -> ulab.array: ...
def erf(a: _ArrayLike) -> ulab.array: ...
def erfc(a: _ArrayLike) -> ulab.array: ...
def exp(a: _ArrayLike) -> ulab.array: ...
def expm1(a: _ArrayLike) -> ulab.array: ...
def floor(a: _ArrayLike) -> ulab.array: ...
def gamma(a: _ArrayLike) -> ulab.array: ...
def lgamma(a: _ArrayLike) -> ulab.array: ...
def log(a: _ArrayLike) -> ulab.array: ...
def log10(a: _ArrayLike) -> ulab.array: ...
def log2(a: _ArrayLike) -> ulab.array: ...
def radians(a: _ArrayLike) -> ulab.array: ...
def sin(a: _ArrayLike) -> ulab.array: ...
def sinh(a: _ArrayLike) -> ulab.array: ...
def sqrt(a: _ArrayLike) -> ulab.array: ...
def tan(a: _ArrayLike) -> ulab.array: ...
def tanh(a: _ArrayLike) -> ulab.array: ...
def vectorize(f: Union[Callable[[int], float], Callable[[float], float]], *, otypes: Optional[_DType] = ...) -> Callable[[_ArrayLike], ulab.array]: ...
