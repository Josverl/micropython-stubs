from typing import Any, Dict, Optional, Sequence, Tuple, Union

Node = Any

class CancelledError(BaseException): ...
class TimeoutError(Exception): ...

class SingletonGenerator:
    def __init__(self) -> None: ...
    def __iter__(self) -> Any: ...
    #   0: return self
    # ? 0: return self
    def __next__(self) -> None: ...

def sleep_ms(t: Any, sgen: Any = SingletonGenerator()) -> Any: ...

#   0: return sgen
# ? 0: return sgen
def sleep(t: Any) -> Any: ...

#   0: return sleep_ms(int(t*))
# ? 0: return sleep_ms(int)
class IOQueue:
    def __init__(self) -> None: ...
    def _enqueue(self, s: str, idx: Any) -> None: ...
    def _dequeue(self, s: str) -> None: ...
    def queue_read(self, s: str) -> None: ...
    def queue_write(self, s: str) -> None: ...
    def remove(self, task: Any) -> None: ...
    def wait_io_event(self, dt: Any) -> None: ...

def _promote_to_task(aw: Any) -> Any: ...
def create_task(coro: Any) -> Any: ...

#   0: return t
# ? 0: return t
def run_until_complete(main_task: Any = None) -> Optional[Any]: ...

#   0: return
#   0: return
#   1: return er.value
# ? 1: return er.value
def run(coro: Any) -> Any: ...

#   0: return run_until_complete(create_task(coro))
# ? 0: return run_until_complete(create_task(coro))
class Loop:
    def create_task(coro: Any) -> Any: ...
    #   0: return create_task(coro)
    # ? 0: return create_task(coro)
    def run_forever() -> None: ...
    def run_until_complete(aw: Any) -> Any: ...
    #   0: return run_until_complete(_promote_to_task(aw))
    # ? 0: return run_until_complete(_promote_to_task(aw))
    def stop() -> None: ...
    def close() -> None: ...
    def set_exception_handler(handler: Any) -> None: ...
    def get_exception_handler() -> Any: ...
    #   0: return Loop._exc_handler
    # ? 0: return Loop._exc_handler
    def default_exception_handler(loop: Any, context: Any) -> None: ...
    def call_exception_handler(context: Any) -> None: ...

def get_event_loop(runq_len: Any, waitq_len: Any) -> Any: ...

#   0: return Loop
# ? 0: return Loop
def new_event_loop() -> Any: ...

#   0: return Loop
# ? 0: return Loop
