
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class PIOASMError(Exception): ...
class PIOASMEmit:
    def __init__(self) -> None: ...
    def start_pass(self, pass_: Any) -> None: ...
    def __getitem__(self, key: Any) -> Any: ...
        #   0: return self.delay(key)
        # ? 0: return self.delay(key)
    def delay(self, delay: Any) -> Any: ...
        #   0: return self
        # ? 0: return self
    def side(self, value: Any) -> Any: ...
        #   0: return self
        # ? 0: return self
    def wrap_target(self) -> None: ...
    def wrap(self) -> None: ...
    def label(self, label: Any) -> None: ...
    def word(self, instr: Any, label: Any=) -> Any: ...
        #   0: return self
        # ? 0: return self
    def nop(self) -> Any: ...
        #   0: return self.word()
        # ? 0: return self.word()
    def jmp(self, cond: Any, label: Any=) -> Any: ...
        #   0: return self.word(|cond<<,label)
        # ? 0: return self.word(|cond<<, label)
    def wait(self, polarity: Any, src: Any, index: Any) -> Any: ...
        #   0: return self.word(|polarity<<|src<<|index)
        # ? 0: return self.word(|polarity<<|src<<|index)
    def in_(self, src: Any, data: Any) -> Any: ...
        #   0: return self.word(|src<<|data&)
        # ? 0: return self.word(|src<<|data&)
    def out(self, dest: Any, data: Any) -> Any: ...
        #   0: return self.word(|dest<<|data&)
        # ? 0: return self.word(|dest<<|data&)
    def push(self, value: Any=, value2: Any=) -> Any: ...
        #   0: return self.word(|value&)
        # ? 0: return self.word(|value&)
    def pull(self, value: Any=, value2: Any=) -> Any: ...
        #   0: return self.word(|value&)
        # ? 0: return self.word(|value&)
    def mov(self, dest: Any, src: Any) -> Any: ...
        #   0: return self.word(|dest<<|src)
        # ? 0: return self.word(|dest<<|src)
    def irq(self, mod: Any, index: Any=) -> Any: ...
        #   0: return self.word(|mod&|index)
        # ? 0: return self.word(|mod&|index)
    def set(self, dest: Any, data: Any) -> Any: ...
        #   0: return self.word(|dest<<|data)
        # ? 0: return self.word(|dest<<|data)
def asm_pio(**kw) -> Any:
    #   0: return emit.prog
    # ? 0: return emit.prog
    #   1: return dec
    # ? 1: return dec
    def dec(f: Any) -> Any: ...
        #   0: return emit.prog
        # ? 0: return emit.prog
def asm_pio_encode(instr: Any, sideset_count: Any) -> Any: ...
    #   0: return emit.prog[_PROG_DATA][]
    # ? 0: return emit.prog[_PROG_DATA][]
