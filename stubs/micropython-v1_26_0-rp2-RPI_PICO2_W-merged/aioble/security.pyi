"""
Module: 'aioble.security' on micropython-v1.26.0-rp2-RPI_PICO2_W
"""

# MCU: {'mpy': 'v6.3', 'build': '', 'ver': '1.26.0', 'arch': 'armv7emsp', 'version': '1.26.0', 'port': 'rp2', 'board': 'RPI_PICO2_W', 'family': 'micropython', 'board_id': 'RPI_PICO2_W', 'variant': '', 'cpu': 'RP2350'}
# Stubber: v1.25.1
from __future__ import annotations
from typing import Final, Generator
from _typeshed import Incomplete

_modified: bool = False
_DEFAULT_PATH: Final[str] = "ble_secrets.json"
_secrets: dict = {}

def _security_irq(*args, **kwargs) -> Incomplete: ...
def register_irq_handler(*args, **kwargs) -> Incomplete: ...
def _security_shutdown(*args, **kwargs) -> Incomplete: ...
def log_warn(*args, **kwargs) -> Incomplete: ...
def log_info(*args, **kwargs) -> Incomplete: ...
def load_secrets(*args, **kwargs) -> Incomplete: ...
def schedule(*args, **kwargs) -> Incomplete: ...
def const(*args, **kwargs) -> Incomplete: ...
def _save_secrets(*args, **kwargs) -> Incomplete: ...

_path: Incomplete  ## <class 'NoneType'> = None

def pair(*args, **kwargs) -> Generator:  ## = <generator>
    ...

class DeviceConnection:
    _connected: dict = {}
    def is_connected(self, *args, **kwargs) -> Incomplete: ...
    def _run_task(self, *args, **kwargs) -> Incomplete: ...
    def services(self, *args, **kwargs) -> Incomplete: ...
    def timeout(self, *args, **kwargs) -> Incomplete: ...
    def device_task(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def l2cap_connect(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def pair(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def service(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def l2cap_accept(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def disconnected(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def exchange_mtu(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def disconnect(*args, **kwargs) -> Generator:  ## = <generator>
        ...

    def __init__(self, *argv, **kwargs) -> None: ...

ble: Incomplete  ## <class 'BLE'> = <BLE>
