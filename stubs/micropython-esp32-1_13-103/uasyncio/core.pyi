from typing import Any

class CancelledError: ...

class IOQueue:
    def _dequeue() -> None: ...
    def _enqueue() -> None: ...
    def queue_read() -> None: ...
    def queue_write() -> None: ...
    def remove() -> None: ...
    def wait_io_event() -> None: ...

class Loop:
    _exc_handler: Any
    def call_exception_handler() -> None: ...
    def close() -> None: ...
    def create_task() -> None: ...
    def default_exception_handler() -> None: ...
    def get_exception_handler() -> None: ...
    def run_forever() -> None: ...
    def run_until_complete() -> None: ...
    def set_exception_handler() -> None: ...
    def stop() -> None: ...

class SingletonGenerator: ...
class Task: ...

class TaskQueue:
    def peek() -> None: ...
    def pop_head() -> None: ...
    def push_head() -> None: ...
    def push_sorted() -> None: ...
    def remove() -> None: ...

class TimeoutError: ...

_exc_context: Any
_io_queue: Any

def _promote_to_task() -> None: ...

_stop_task: Any
_stopper: Any
_task_queue: Any

def create_task() -> None: ...
def get_event_loop() -> None: ...
def new_event_loop() -> None: ...
def run() -> None: ...
def run_until_complete() -> None: ...

select: Any

def sleep() -> None: ...
def sleep_ms() -> None: ...

sys: Any

def ticks() -> None: ...
def ticks_add() -> None: ...
def ticks_diff() -> None: ...
