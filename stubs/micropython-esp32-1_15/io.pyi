
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class BufferedWriter:
    def flush() -> None: ...
    def write() -> None: ...
class BytesIO:
    def close() -> None: ...
    def flush() -> None: ...
    def getvalue() -> None: ...
    def read() -> None: ...
    def readinto() -> None: ...
    def readline() -> None: ...
    def seek() -> None: ...
    def tell() -> None: ...
    def write() -> None: ...
class FileIO:
    def close() -> None: ...
    def flush() -> None: ...
    def read() -> None: ...
    def readinto() -> None: ...
    def readline() -> None: ...
    def readlines() -> None: ...
    def seek() -> None: ...
    def tell() -> None: ...
    def write() -> None: ...
class IOBase: ...
class StringIO:
    def close() -> None: ...
    def flush() -> None: ...
    def getvalue() -> None: ...
    def read() -> None: ...
    def readinto() -> None: ...
    def readline() -> None: ...
    def seek() -> None: ...
    def tell() -> None: ...
    def write() -> None: ...
class TextIOWrapper:
    def close() -> None: ...
    def flush() -> None: ...
    def read() -> None: ...
    def readinto() -> None: ...
    def readline() -> None: ...
    def readlines() -> None: ...
    def seek() -> None: ...
    def tell() -> None: ...
    def write() -> None: ...
def open() -> None: ...
