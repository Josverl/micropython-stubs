from . import core as core
from typing import Any

class Stream:
    s: Any
    e: Any
    out_buf: bytes
    def __init__(self, s, e=...) -> None: ...
    def get_extra_info(self, v): ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
    def close(self) -> None: ...
    async def wait_closed(self) -> None: ...
    async def read(self, n): ...
    async def readinto(self, buf): ...
    async def readexactly(self, n): ...
    async def readline(self): ...
    def write(self, buf) -> None: ...
    async def drain(self) -> None: ...
StreamReader = Stream
StreamWriter = Stream

async def open_connection(host, port): ...

class Server:
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
    def close(self) -> None: ...
    async def wait_closed(self) -> None: ...
    async def _serve(self, s, cb) -> None: ...

async def start_server(cb, host, port, backlog: int = ...): ...
async def stream_awrite(self, buf, off: int = ..., sz: int = ...) -> None: ...
