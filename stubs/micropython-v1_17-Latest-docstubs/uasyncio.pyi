from typing import Any, Coroutine, List, Tuple

class Task:
    def __init__(self) -> None: ...
    def cancel(self) -> None: ...

class Event:
    def __init__(self) -> None: ...
    def is_set(self) -> bool: ...
    def set(self) -> None: ...
    def clear(self) -> None: ...
    def wait(self) -> Coroutine[Any, Any, Any]: ...

class ThreadSafeFlag:
    def __init__(self) -> None: ...
    def set(self) -> None: ...
    def wait(self) -> Coroutine[Any, Any, Any]: ...

class Lock:
    def __init__(self) -> None: ...
    def locked(self) -> bool: ...
    def acquire(self) -> Coroutine[None, Any, Any]: ...
    def release(self) -> Any: ...

class Stream:
    def __init__(self) -> None: ...
    def get_extra_info(self, v) -> Any: ...
    def close(self) -> None: ...
    def wait_closed(self) -> Coroutine[None, Any, Any]: ...
    def read(self, n) -> Coroutine[Any, Any, Any]: ...
    def readinto(self, buf) -> Coroutine[int, Any, Any]: ...
    def readexactly(self, n) -> Coroutine[bytes, Any, Any]: ...
    def readline(self) -> Coroutine[Any, Any, Any]: ...
    def write(self, buf) -> Any: ...
    def drain(self) -> Coroutine[Any, Any, Any]: ...

class Server:
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def wait_closed(self) -> Coroutine[None, Any, Any]: ...

class Loop:
    def __init__(self) -> None: ...
    def create_task(self, coro) -> Task: ...
    def run_forever(self) -> Any: ...
    def run_until_complete(self, awaitable) -> Any: ...
    def stop(self) -> None: ...
    def close(self) -> None: ...
    def set_exception_handler(self, handler) -> None: ...
    def get_exception_handler(self) -> None: ...
    def default_exception_handler(self, context) -> Any: ...
    def call_exception_handler(self, context) -> Any: ...

def create_task(coro) -> Task: ...
def current_task() -> Task: ...
def run(coro) -> Any: ...
def sleep(t) -> Coroutine[Any, Any, Any]: ...
def sleep_ms(t) -> Coroutine[Any, Any, Any]: ...
def wait_for(awaitable, timeout) -> Coroutine[Any, Any, Any]: ...
def wait_for_ms(awaitable, timeout) -> Coroutine[Any, Any, Any]: ...
def gather(*awaitables, return_exceptions: bool = ...) -> Coroutine[List, Any, Any]: ...
def open_connection(host, port) -> Coroutine[Tuple, Any, Any]: ...
def start_server(callback, host, port, backlog: int = ...) -> Coroutine[Server, Any, Any]: ...
def get_event_loop() -> Any: ...
def new_event_loop() -> Any: ...
