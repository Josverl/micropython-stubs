from _rp2 import *
from typing import Any

_PROG_DATA: Any
_PROG_OFFSET_PIO0: Any
_PROG_OFFSET_PIO1: Any
_PROG_EXECCTRL: Any
_PROG_SHIFTCTRL: Any
_PROG_OUT_PINS: Any
_PROG_SET_PINS: Any
_PROG_SIDESET_PINS: Any
_PROG_MAX_FIELDS: Any

class PIOASMError(Exception): ...

class PIOASMEmit:
    labels: Any
    prog: Any
    wrap_used: bool
    sideset_count: int
    def __init__(
        self,
        *,
        out_init: Any | None = ...,
        set_init: Any | None = ...,
        sideset_init: Any | None = ...,
        in_shiftdir: int = ...,
        out_shiftdir: int = ...,
        autopush: bool = ...,
        autopull: bool = ...,
        push_thresh: int = ...,
        pull_thresh: int = ...,
        fifo_join: int = ...,
    ) -> None: ...
    delay_max: int
    sideset_opt: Any
    pass_: Any
    num_instr: int
    num_sideset: int
    def start_pass(self, pass_) -> None: ...
    def __getitem__(self, key): ...
    def delay(self, delay): ...
    def side(self, value): ...
    def wrap_target(self) -> None: ...
    def wrap(self) -> None: ...
    def label(self, label) -> None: ...
    def word(self, instr, label: Any | None = ...): ...
    def nop(self): ...
    def jmp(self, cond, label: Any | None = ...): ...
    def wait(self, polarity, src, index): ...
    def in_(self, src, data): ...
    def out(self, dest, data): ...
    def push(self, value: int = ..., value2: int = ...): ...
    def pull(self, value: int = ..., value2: int = ...): ...
    def mov(self, dest, src): ...
    def irq(self, mod, index: Any | None = ...): ...
    def set(self, dest, data): ...

_pio_funcs: Any

def asm_pio(**kw): ...
def asm_pio_encode(instr, sideset_count, sideset_opt: bool = ...): ...
