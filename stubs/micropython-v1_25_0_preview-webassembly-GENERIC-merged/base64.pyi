"""
Module: 'base64' on micropython-v1.24.1-webassembly
"""

# MCU: {'family': 'micropython', 'version': '1.24.1', 'build': '', 'ver': '1.24.1', 'port': 'webassembly', 'board': '', 'cpu': 'Emscripten', 'mpy': 'v6.3', 'arch': ''}
# Stubber: v1.24.0
from __future__ import annotations
from typing import Any, Final, Generator
from _typeshed import Incomplete

MAXBINSIZE: Final[int] = 57
_b32tab: list = []
_b32rev: dict = {}
MAXLINESIZE: Final[int] = 76
_b32alphabet: dict = {}
bytes_types: tuple = ()

def decodestring(*args, **kwargs) -> Incomplete: ...
def b64decode(*args, **kwargs) -> Incomplete: ...
def b64encode(*args, **kwargs) -> Incomplete: ...
def decodebytes(*args, **kwargs) -> Incomplete: ...
def b32encode(*args, **kwargs) -> Incomplete: ...
def test(*args, **kwargs) -> Incomplete: ...
def encodebytes(*args, **kwargs) -> Incomplete: ...
def urlsafe_b64decode(*args, **kwargs) -> Incomplete: ...
def encodestring(*args, **kwargs) -> Incomplete: ...
def standard_b64encode(*args, **kwargs) -> Incomplete: ...
def standard_b64decode(*args, **kwargs) -> Incomplete: ...
def urlsafe_b64encode(*args, **kwargs) -> Incomplete: ...
def _bytes_from_decode_data(*args, **kwargs) -> Incomplete: ...
def encode(*args, **kwargs) -> Incomplete: ...
def decode(*args, **kwargs) -> Incomplete: ...
def main(*args, **kwargs) -> Incomplete: ...
def b32decode(*args, **kwargs) -> Incomplete: ...
def b16decode(*args, **kwargs) -> Incomplete: ...
def _maketrans(*args, **kwargs) -> Incomplete: ...
def b16encode(*args, **kwargs) -> Incomplete: ...
def _translate(*args, **kwargs) -> Incomplete: ...
