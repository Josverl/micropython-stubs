from typing import Any, IO, Optional, Tuple

AF_INET: Any
AF_INET6: Any
SOCK_STREAM: Any
SOCK_DGRAM: Any
IPPROTO_UDP: Any
IPPROTO_TCP: Any
IPPROTO_SEC: Any

class socket:
    def __init__(self, af=..., type=..., proto=...) -> None: ...
    def close(self) -> Any: ...
    def bind(self, address) -> Any: ...
    def listen(self, backlog: Optional[Any]) -> None: ...
    def accept(self) -> Tuple: ...
    def connect(self, address) -> None: ...
    def send(self, bytes) -> int: ...
    def sendall(self, bytes) -> int: ...
    def recv(self, bufsize) -> bytes: ...
    def sendto(self, bytes, address) -> None: ...
    def recvfrom(self, bufsize) -> Tuple: ...
    def setsockopt(self, level, optname, value) -> None: ...
    def settimeout(self, value) -> Any: ...
    def setblocking(self, flag) -> Any: ...
    def makefile(self, mode: str = ..., buffering: int = ...) -> IO: ...
    def read(self, size: Optional[Any]) -> bytes: ...
    def readinto(self, buf, nbytes: Optional[Any]) -> int: ...
    def readline(self) -> Any: ...
    def write(self, buf) -> int: ...

class error(Exception): ...

def getaddrinfo(host, port, af: int = ..., type: int = ..., proto: int = ..., flags: int = ...) -> Any: ...
def inet_ntop(af, bin_addr) -> Any: ...
def inet_pton(af, txt_addr) -> Any: ...
