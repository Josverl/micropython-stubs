from typing import Any, Optional, Tuple

class BLE:
    def __init__(self) -> None: ...
    def active(self, active: Optional[Any]) -> Any: ...
    def config(self, param) -> Tuple: ...
    def irq(self, handler) -> int: ...
    def gap_advertise(self, interval_us, adv_data: Any | None = ..., *, resp_data: Any | None = ..., connectable: bool = ...) -> Any: ...
    def gap_scan(self, duration_ms, interval_us: int = ..., window_us: int = ..., active: bool = ...) -> Any: ...
    def gap_connect(self, addr_type, addr, scan_duration_ms: int = ...) -> None: ...
    def gap_disconnect(self, conn_handle) -> bool: ...
    def gatts_register_services(self, services_definition) -> Any: ...
    def gatts_read(self, value_handle) -> Any: ...
    def gatts_write(self, value_handle, data, send_update: bool = ...) -> None: ...
    def gatts_notify(self, conn_handle, value_handle, data: Any | None = ...) -> None: ...
    def gatts_indicate(self, conn_handle, value_handle) -> None: ...
    def gatts_set_buffer(self, value_handle, len, append: bool = ...) -> None: ...
    def gattc_discover_services(self, conn_handle, uuid: Any | None = ...) -> Any: ...
    def gattc_discover_characteristics(self, conn_handle, start_handle, end_handle, uuid: Any | None = ...) -> Any: ...
    def gattc_discover_descriptors(self, conn_handle, start_handle, end_handle) -> Any: ...
    def gattc_read(self, conn_handle, value_handle) -> None: ...
    def gattc_write(self, conn_handle, value_handle, data, mode: int = ...) -> None: ...
    def gattc_exchange_mtu(self, conn_handle) -> Any: ...
    def l2cap_listen(self, psm, mtu) -> Any: ...
    def l2cap_connect(self, conn_handle, psm, mtu) -> None: ...
    def l2cap_disconnect(self, conn_handle, cid) -> None: ...
    def l2cap_send(self, conn_handle, cid, buf) -> bool: ...
    def l2cap_recvinto(self, conn_handle, cid, buf) -> int: ...
    def gap_pair(self, conn_handle) -> Any: ...
    def gap_passkey(self, conn_handle, action, passkey) -> Any: ...

class UUID:
    def __init__(self, value) -> None: ...
