"""
Module: 'builtins' on micropython-v1.25.0-rp2-RPI_PICO2_W
"""

# MCU: {'build': '', 'ver': '1.25.0', 'version': '1.25.0', 'port': 'rp2', 'board': 'RPI_PICO2_W', 'mpy': 'v6.3', 'family': 'micropython', 'cpu': 'RP2350', 'arch': 'armv7emsp'}
# Stubber: v1.24.0
from __future__ import annotations
from _typeshed import Incomplete

def any(*args, **kwargs) -> Incomplete: ...
def all(*args, **kwargs) -> Incomplete: ...
def len(*args, **kwargs) -> Incomplete: ...
def id(*args, **kwargs) -> Incomplete: ...
def sum(*args, **kwargs) -> Incomplete: ...
def issubclass(*args, **kwargs) -> Incomplete: ...
def iter(*args, **kwargs) -> Incomplete: ...
def abs(*args, **kwargs) -> Incomplete: ...
def isinstance(*args, **kwargs) -> Incomplete: ...
def setattr(*args, **kwargs) -> Incomplete: ...
def eval(*args, **kwargs) -> Incomplete: ...
def divmod(*args, **kwargs) -> Incomplete: ...
def hash(*args, **kwargs) -> Incomplete: ...
def exec(*args, **kwargs) -> Incomplete: ...
def getattr(*args, **kwargs) -> Incomplete: ...
def chr(*args, **kwargs) -> Incomplete: ...
def callable(*args, **kwargs) -> Incomplete: ...
def dir(*args, **kwargs) -> Incomplete: ...
def hasattr(*args, **kwargs) -> Incomplete: ...
def sorted(*args, **kwargs) -> Incomplete: ...
def globals(*args, **kwargs) -> Incomplete: ...
def max(*args, **kwargs) -> Incomplete: ...
def input(*args, **kwargs) -> Incomplete: ...
def hex(*args, **kwargs) -> Incomplete: ...
def help(*args, **kwargs) -> Incomplete: ...
def open(*args, **kwargs) -> Incomplete: ...
def ord(*args, **kwargs) -> Incomplete: ...
def pow(*args, **kwargs) -> Incomplete: ...
def oct(*args, **kwargs) -> Incomplete: ...
def min(*args, **kwargs) -> Incomplete: ...
def print(*args, **kwargs) -> Incomplete: ...
def repr(*args, **kwargs) -> Incomplete: ...
def locals(*args, **kwargs) -> Incomplete: ...
def compile(*args, **kwargs) -> Incomplete: ...
def bin(*args, **kwargs) -> Incomplete: ...
def execfile(*args, **kwargs) -> Incomplete: ...
def next(*args, **kwargs) -> Incomplete: ...
def delattr(*args, **kwargs) -> Incomplete: ...
def round(*args, **kwargs) -> Incomplete: ...

NotImplemented: Incomplete  ## <class ''> = NotImplemented
Ellipsis: Incomplete  ## <class ''> = Ellipsis

class set:
    def discard(self, *args, **kwargs) -> Incomplete: ...
    def isdisjoint(self, *args, **kwargs) -> Incomplete: ...
    def intersection_update(self, *args, **kwargs) -> Incomplete: ...
    def intersection(self, *args, **kwargs) -> Incomplete: ...
    def issubset(self, *args, **kwargs) -> Incomplete: ...
    def symmetric_difference_update(self, *args, **kwargs) -> Incomplete: ...
    def symmetric_difference(self, *args, **kwargs) -> Incomplete: ...
    def issuperset(self, *args, **kwargs) -> Incomplete: ...
    def union(self, *args, **kwargs) -> Incomplete: ...
    def difference_update(self, *args, **kwargs) -> Incomplete: ...
    def pop(self, *args, **kwargs) -> Incomplete: ...
    def copy(self, *args, **kwargs) -> Incomplete: ...
    def clear(self, *args, **kwargs) -> Incomplete: ...
    def remove(self, *args, **kwargs) -> Incomplete: ...
    def difference(self, *args, **kwargs) -> Incomplete: ...
    def add(self, *args, **kwargs) -> Incomplete: ...
    def update(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class slice:
    def __init__(self, *argv, **kwargs) -> None: ...

class complex:
    def __init__(self, *argv, **kwargs) -> None: ...

class float:
    def __init__(self, *argv, **kwargs) -> None: ...

class filter:
    def __init__(self, *argv, **kwargs) -> None: ...

class enumerate:
    def __init__(self, *argv, **kwargs) -> None: ...

class frozenset:
    def union(self, *args, **kwargs) -> Incomplete: ...
    def issubset(self, *args, **kwargs) -> Incomplete: ...
    def issuperset(self, *args, **kwargs) -> Incomplete: ...
    def symmetric_difference(self, *args, **kwargs) -> Incomplete: ...
    def isdisjoint(self, *args, **kwargs) -> Incomplete: ...
    def copy(self, *args, **kwargs) -> Incomplete: ...
    def difference(self, *args, **kwargs) -> Incomplete: ...
    def intersection(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class reversed:
    def __init__(self, *argv, **kwargs) -> None: ...

class property:
    def getter(self, *args, **kwargs) -> Incomplete: ...
    def setter(self, *args, **kwargs) -> Incomplete: ...
    def deleter(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class memoryview:
    def hex(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class ViperTypeError(Exception): ...

class tuple:
    def index(self, *args, **kwargs) -> Incomplete: ...
    def count(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class super:
    def __init__(self, *argv, **kwargs) -> None: ...

class str:
    def rstrip(self, *args, **kwargs) -> Incomplete: ...
    def startswith(self, *args, **kwargs) -> Incomplete: ...
    def split(self, *args, **kwargs) -> Incomplete: ...
    def rfind(self, *args, **kwargs) -> Incomplete: ...
    def rsplit(self, *args, **kwargs) -> Incomplete: ...
    def rindex(self, *args, **kwargs) -> Incomplete: ...
    def replace(self, *args, **kwargs) -> Incomplete: ...
    def partition(self, *args, **kwargs) -> Incomplete: ...
    def strip(self, *args, **kwargs) -> Incomplete: ...
    def rpartition(self, *args, **kwargs) -> Incomplete: ...
    def upper(self, *args, **kwargs) -> Incomplete: ...
    def encode(self, *args, **kwargs) -> Incomplete: ...
    def center(self, *args, **kwargs) -> Incomplete: ...
    def splitlines(self, *args, **kwargs) -> Incomplete: ...
    def format(self, *args, **kwargs) -> Incomplete: ...
    def isalpha(self, *args, **kwargs) -> Incomplete: ...
    def index(self, *args, **kwargs) -> Incomplete: ...
    def count(self, *args, **kwargs) -> Incomplete: ...
    def find(self, *args, **kwargs) -> Incomplete: ...
    def endswith(self, *args, **kwargs) -> Incomplete: ...
    def lstrip(self, *args, **kwargs) -> Incomplete: ...
    def join(self, *args, **kwargs) -> Incomplete: ...
    def isdigit(self, *args, **kwargs) -> Incomplete: ...
    def lower(self, *args, **kwargs) -> Incomplete: ...
    def islower(self, *args, **kwargs) -> Incomplete: ...
    def isupper(self, *args, **kwargs) -> Incomplete: ...
    def isspace(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class type:
    def __init__(self, *argv, **kwargs) -> None: ...

class UnicodeError(Exception): ...

class StopAsyncIteration:
    def __init__(self, *argv, **kwargs) -> None: ...

class zip:
    def __init__(self, *argv, **kwargs) -> None: ...

class IndentationError(Exception): ...
class KeyboardInterrupt(Exception): ...
class KeyError(Exception): ...
class IndexError(Exception): ...
class LookupError(Exception): ...
class NotImplementedError(Exception): ...
class NameError(Exception): ...
class MemoryError(Exception): ...
class OSError(Exception): ...
class ImportError(Exception): ...
class AttributeError(Exception): ...
class AssertionError(Exception): ...
class ArithmeticError(Exception): ...

class GeneratorExit:
    def __init__(self, *argv, **kwargs) -> None: ...

class EOFError(Exception): ...

class range:
    def __init__(self, *argv, **kwargs) -> None: ...

class bytearray:
    def rstrip(self, *args, **kwargs) -> Incomplete: ...
    def rsplit(self, *args, **kwargs) -> Incomplete: ...
    def split(self, *args, **kwargs) -> Incomplete: ...
    def startswith(self, *args, **kwargs) -> Incomplete: ...
    def replace(self, *args, **kwargs) -> Incomplete: ...
    def rindex(self, *args, **kwargs) -> Incomplete: ...
    def rfind(self, *args, **kwargs) -> Incomplete: ...
    def splitlines(self, *args, **kwargs) -> Incomplete: ...
    def partition(self, *args, **kwargs) -> Incomplete: ...
    def hex(self, *args, **kwargs) -> Incomplete: ...
    def rpartition(self, *args, **kwargs) -> Incomplete: ...
    def strip(self, *args, **kwargs) -> Incomplete: ...
    def upper(self, *args, **kwargs) -> Incomplete: ...
    def decode(self, *args, **kwargs) -> Incomplete: ...
    def center(self, *args, **kwargs) -> Incomplete: ...
    def find(self, *args, **kwargs) -> Incomplete: ...
    def extend(self, *args, **kwargs) -> Incomplete: ...
    def format(self, *args, **kwargs) -> Incomplete: ...
    def index(self, *args, **kwargs) -> Incomplete: ...
    def append(self, *args, **kwargs) -> Incomplete: ...
    def endswith(self, *args, **kwargs) -> Incomplete: ...
    def count(self, *args, **kwargs) -> Incomplete: ...
    def lstrip(self, *args, **kwargs) -> Incomplete: ...
    def isalpha(self, *args, **kwargs) -> Incomplete: ...
    def isupper(self, *args, **kwargs) -> Incomplete: ...
    def join(self, *args, **kwargs) -> Incomplete: ...
    def lower(self, *args, **kwargs) -> Incomplete: ...
    def islower(self, *args, **kwargs) -> Incomplete: ...
    def isdigit(self, *args, **kwargs) -> Incomplete: ...
    def isspace(self, *args, **kwargs) -> Incomplete: ...
    @classmethod
    def fromhex(cls, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class dict:
    def popitem(self, *args, **kwargs) -> Incomplete: ...
    def pop(self, *args, **kwargs) -> Incomplete: ...
    def values(self, *args, **kwargs) -> Incomplete: ...
    def setdefault(self, *args, **kwargs) -> Incomplete: ...
    def update(self, *args, **kwargs) -> Incomplete: ...
    def copy(self, *args, **kwargs) -> Incomplete: ...
    def clear(self, *args, **kwargs) -> Incomplete: ...
    def keys(self, *args, **kwargs) -> Incomplete: ...
    def get(self, *args, **kwargs) -> Incomplete: ...
    def items(self, *args, **kwargs) -> Incomplete: ...
    @classmethod
    def fromkeys(cls, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class bytes:
    def split(self, *args, **kwargs) -> Incomplete: ...
    def rstrip(self, *args, **kwargs) -> Incomplete: ...
    def startswith(self, *args, **kwargs) -> Incomplete: ...
    def splitlines(self, *args, **kwargs) -> Incomplete: ...
    def rfind(self, *args, **kwargs) -> Incomplete: ...
    def rsplit(self, *args, **kwargs) -> Incomplete: ...
    def rindex(self, *args, **kwargs) -> Incomplete: ...
    def partition(self, *args, **kwargs) -> Incomplete: ...
    def hex(self, *args, **kwargs) -> Incomplete: ...
    def rpartition(self, *args, **kwargs) -> Incomplete: ...
    def strip(self, *args, **kwargs) -> Incomplete: ...
    def upper(self, *args, **kwargs) -> Incomplete: ...
    def decode(self, *args, **kwargs) -> Incomplete: ...
    def center(self, *args, **kwargs) -> Incomplete: ...
    def index(self, *args, **kwargs) -> Incomplete: ...
    def format(self, *args, **kwargs) -> Incomplete: ...
    def isalpha(self, *args, **kwargs) -> Incomplete: ...
    def replace(self, *args, **kwargs) -> Incomplete: ...
    def count(self, *args, **kwargs) -> Incomplete: ...
    def find(self, *args, **kwargs) -> Incomplete: ...
    def endswith(self, *args, **kwargs) -> Incomplete: ...
    def isdigit(self, *args, **kwargs) -> Incomplete: ...
    def join(self, *args, **kwargs) -> Incomplete: ...
    def lower(self, *args, **kwargs) -> Incomplete: ...
    def lstrip(self, *args, **kwargs) -> Incomplete: ...
    def isspace(self, *args, **kwargs) -> Incomplete: ...
    def islower(self, *args, **kwargs) -> Incomplete: ...
    def isupper(self, *args, **kwargs) -> Incomplete: ...
    @classmethod
    def fromhex(cls, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class int:
    def to_bytes(self, *args, **kwargs) -> Incomplete: ...
    @classmethod
    def from_bytes(cls, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class object:
    def __init__(self, *argv, **kwargs) -> None: ...

class map:
    def __init__(self, *argv, **kwargs) -> None: ...

class list:
    def pop(self, *args, **kwargs) -> Incomplete: ...
    def insert(self, *args, **kwargs) -> Incomplete: ...
    def index(self, *args, **kwargs) -> Incomplete: ...
    def remove(self, *args, **kwargs) -> Incomplete: ...
    def reverse(self, *args, **kwargs) -> Incomplete: ...
    def sort(self, *args, **kwargs) -> Incomplete: ...
    def clear(self, *args, **kwargs) -> Incomplete: ...
    def append(self, *args, **kwargs) -> Incomplete: ...
    def extend(self, *args, **kwargs) -> Incomplete: ...
    def copy(self, *args, **kwargs) -> Incomplete: ...
    def count(self, *args, **kwargs) -> Incomplete: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class OverflowError(Exception): ...

class bool:
    def __init__(self, *argv, **kwargs) -> None: ...

class SyntaxError(Exception): ...
class StopIteration(Exception): ...
class RuntimeError(Exception): ...
class SystemExit(Exception): ...
class ZeroDivisionError(Exception): ...
class ValueError(Exception): ...
class TypeError(Exception): ...
