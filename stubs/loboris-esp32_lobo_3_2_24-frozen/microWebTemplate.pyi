from typing import Any

class MicroWebTemplate:
    TOKEN_OPEN: str
    TOKEN_CLOSE: str
    TOKEN_OPEN_LEN: Any
    TOKEN_CLOSE_LEN: Any
    INSTRUCTION_PYTHON: str
    INSTRUCTION_IF: str
    INSTRUCTION_ELIF: str
    INSTRUCTION_ELSE: str
    INSTRUCTION_FOR: str
    INSTRUCTION_END: str
    INSTRUCTION_INCLUDE: str
    _code: Any
    _escapeStrFunc: Any
    _filepath: Any
    _pos: int
    _endPos: Any
    _line: int
    _reIdentifier: Any
    _pyGlobalVars: Any
    _pyLocalVars: Any
    _rendered: str
    _instructions: Any
    def __init__(self, code, escapeStrFunc: Any | None = ..., filepath: str = ...) -> None: ...
    def Validate(self): ...
    def Execute(self): ...
    def _parseCode(self, execute) -> None: ...
    def _parseBloc(self, execute): ...
    def _processToken(self, tokenContent, execute): ...
    def _processInstructionPYTHON(self, instructionBody, execute) -> None: ...
    def _processInstructionIF(self, instructionBody, execute) -> None: ...
    _elifInstructionBody: Any
    def _processInstructionELIF(self, instructionBody, execute): ...
    def _processInstructionELSE(self, instructionBody, execute): ...
    def _processInstructionFOR(self, instructionBody, execute) -> None: ...
    def _processInstructionEND(self, instructionBody, execute): ...
    def _processInstructionINCLUDE(self, instructionBody, execute) -> None: ...
