from typing import Any

class Editor:
    KEYMAP: Any
    yank_buffer: Any
    find_pattern: str
    case: str
    replc_pattern: str
    top_line: int
    tab_size: Any
    changed: str
    message: str
    content: Any
    undo: Any
    undo_limit: Any
    undo_zero: int
    autoindent: str
    mark: Any
    write_tabs: str
    def __init__(self, tab_size, undo_limit) -> None: ...
    def wr(self, s) -> None: ...
    def rd_any(self): ...
    def rd(self): ...
    def goto(self, row, col) -> None: ...
    def clear_to_eol(self) -> None: ...
    def cursor(self, onoff) -> None: ...
    def hilite(self, mode) -> None: ...
    def mouse_reporting(self, onoff) -> None: ...
    def scroll_region(self, stop) -> None: ...
    def scroll_up(self, scrolling) -> None: ...
    def scroll_down(self, scrolling) -> None: ...
    def get_screen_size(self): ...
    row: Any
    def redraw(self, flag) -> None: ...
    def get_input(self): ...
    cur_line: Any
    col: Any
    margin: Any
    def display_window(self) -> None: ...
    def spaces(self, line, pos: Any | None = ...): ...
    def line_range(self): ...
    def line_edit(self, prompt, default): ...
    def find_in_file(self, pattern, col, end): ...
    def undo_add(self, lnum, text, key, span: int = ...) -> None: ...
    total_lines: Any
    def delete_lines(self, yank) -> None: ...
    fname: Any
    def handle_edit_keys(self, key, char): ...
    def edit_loop(self): ...
    def packtabs(self, s): ...
    def get_file(self, fname) -> None: ...
    def put_file(self, fname) -> None: ...

def expandtabs(s): ...
def pye(*content, tab_size: int = ..., undo: int = ..., device: int = ..., baud: int = ...): ...
