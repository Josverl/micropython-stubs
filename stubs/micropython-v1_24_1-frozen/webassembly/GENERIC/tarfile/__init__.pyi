from .write import _close_write as _close_write, _open_write as _open_write, add as add, addfile as addfile
from _typeshed import Incomplete

_TAR_HEADER: Incomplete
DIRTYPE: str
REGTYPE: str
_S_IFMT: int
_S_IFREG: int
_S_IFDIR: int
_BLOCKSIZE: int

def _roundup(val, align): ...

class FileSection:
    f: Incomplete
    content_len: Incomplete
    align: Incomplete
    def __init__(self, f, content_len, aligned_len) -> None: ...
    def read(self, sz: int = 65536): ...
    def readinto(self, buf): ...
    def skip(self) -> None: ...

class TarInfo:
    name: Incomplete
    mode: Incomplete
    def __init__(self, name: str = "") -> None: ...
    @property
    def type(self): ...
    def __str__(self) -> str: ...
    def isdir(self): ...
    def isreg(self): ...

class TarFile:
    subf: Incomplete
    mode: Incomplete
    offset: int
    f: Incomplete
    def __init__(self, name: Incomplete | None = None, mode: str = "r", fileobj: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self, unused_type: type[BaseException] | None, unused_value: BaseException | None, unused_traceback: types.TracebackType | None
    ) -> None: ...
    def next(self): ...
    def __iter__(self): ...
    def __next__(self): ...
    def extractfile(self, tarinfo): ...
    def close(self) -> None: ...
