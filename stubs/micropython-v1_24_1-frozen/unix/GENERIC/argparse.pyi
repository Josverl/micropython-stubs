from _typeshed import Incomplete

class _ArgError(BaseException): ...

class _Arg:
    names: Incomplete
    dest: Incomplete
    action: Incomplete
    nargs: Incomplete
    const: Incomplete
    default: Incomplete
    help: Incomplete
    def __init__(self, names, dest, action, nargs, const, default, help) -> None: ...
    def parse(self, optname, args): ...

def _dest_from_optnames(opt_names): ...

class ArgumentParser:
    description: Incomplete
    opt: Incomplete
    pos: Incomplete
    def __init__(self, *, description: str = "") -> None: ...
    def add_argument(self, *args, **kwargs) -> None: ...
    def usage(self, full): ...
    def parse_args(self, args: Incomplete | None = None): ...
    def parse_known_args(self, args: Incomplete | None = None): ...
    def _parse_args_impl(self, args, return_unknown): ...
    def _parse_args(self, args, return_unknown): ...
