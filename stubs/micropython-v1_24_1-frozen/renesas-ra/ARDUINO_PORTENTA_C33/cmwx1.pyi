from _typeshed import Incomplete
from micropython import const as const

class LoraError(Exception): ...
class LoraErrorTimeout(LoraError): ...
class LoraErrorParam(LoraError): ...
class LoraErrorBusy(LoraError): ...
class LoraErrorOverflow(LoraError): ...
class LoraErrorNoNetwork(LoraError): ...
class LoraErrorRX(LoraError): ...
class LoraErrorUnknown(LoraError): ...

class Lora:
    MODE_ABP: int
    MODE_OTAA: int
    CLASS_A: str
    CLASS_B: str
    CLASS_C: str
    BAND_AS923: int
    BAND_AU915: int
    BAND_EU868: int
    BAND_KR920: int
    BAND_IN865: int
    BAND_US915: int
    BAND_US915_HYBRID: int
    RF_MODE_RFO: int
    RF_MODE_PABOOST: int
    LoraErrors: Incomplete
    debug: Incomplete
    uart: Incomplete
    rst_pin: Incomplete
    boot_pin: Incomplete
    band: Incomplete
    poll_ms: Incomplete
    last_poll_ms: Incomplete
    def __init__(
        self,
        uart: Incomplete | None = None,
        rst_pin: Incomplete | None = None,
        boot_pin: Incomplete | None = None,
        band=...,
        poll_ms: int = 300000,
        debug: bool = False,
    ) -> None: ...
    def init_modem(self) -> None: ...
    def debug_print(self, data) -> None: ...
    def is_arduino_firmware(self): ...
    def configure_class(self, _class) -> None: ...
    def configure_band(self, band): ...
    def set_baudrate(self, baudrate) -> None: ...
    def set_autobaud(self, timeout: int = 10000): ...
    def get_fw_version(self): ...
    def get_device_eui(self): ...
    def factory_default(self) -> None: ...
    fw_version: Incomplete
    def restart(self) -> None: ...
    def set_rf_power(self, mode, power) -> None: ...
    def set_port(self, port) -> None: ...
    def set_public_network(self, enable) -> None: ...
    def sleep(self, enable) -> None: ...
    def format(self, hexMode) -> None: ...
    def set_datarate(self, dr) -> None: ...
    def get_datarate(self): ...
    def set_adr(self, adr) -> None: ...
    def get_adr(self): ...
    def get_devaddr(self): ...
    def get_nwk_skey(self): ...
    def get_appskey(self): ...
    def get_rx2dr(self): ...
    def set_rx2dr(self, dr) -> None: ...
    def get_ex2freq(self): ...
    def set_rx2freq(self, freq) -> None: ...
    def set_fcu(self, fcu) -> None: ...
    def get_fcu(self): ...
    def set_fcd(self, fcd) -> None: ...
    def get_fcd(self): ...
    def change_mode(self, mode) -> None: ...
    def join(self, timeout_ms): ...
    def get_join_status(self): ...
    def get_max_size(self): ...
    def poll(self) -> None: ...
    def send_data(self, buff, confirmed: bool = True): ...
    def receive_data(self, timeout: int = 1000): ...
    def receive(self, delimiter: Incomplete | None = None, max_bytes: Incomplete | None = None, timeout: int = 1000): ...
    def available(self): ...
    def join_OTAA(self, appEui, appKey, devEui: Incomplete | None = None, timeout: int = 60000): ...
    def join_ABP(self, nwkId, devAddr, nwkSKey, appSKey, timeout: int = 60000): ...
    def handle_error(self, command, data) -> None: ...
    def send_command(
        self, cmd, *args, delimiter: str = "\r", data: Incomplete | None = None, timeout: int = 1000, raise_error: bool = True
    ): ...
