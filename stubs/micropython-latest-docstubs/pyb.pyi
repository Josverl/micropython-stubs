from typing import Any, List, NoReturn, Optional, Tuple

class Accel:
    def __init__(self) -> None: ...
    def filtered_xyz(self) -> Tuple: ...
    def tilt(self) -> Any: ...
    def x(self) -> Any: ...
    def y(self) -> Any: ...
    def z(self) -> Any: ...

class ADC:
    def __init__(self, pin) -> None: ...
    def read(self) -> Any: ...
    def read_timed(self, buf, timer) -> Any: ...
    def read_timed_multi(self, adcs, bufs, timer) -> bool: ...

class CAN:
    NORMAL: Any
    LOOPBACK: Any
    SILENT: Any
    SILENT_LOOPBACK: Any
    STOPPED: Any
    ERROR_ACTIVE: Any
    ERROR_WARNING: Any
    ERROR_PASSIVE: Any
    BUS_OFF: Any
    LIST16: Any
    MASK16: Any
    LIST32: Any
    MASK32: Any
    def __init__(self, bus, *args) -> None: ...
    @classmethod
    def initfilterbanks(cls, nr) -> None: ...
    def init(self, mode, extframe: bool = ..., prescaler: int = ..., *, sjw: int = ..., bs1: int = ..., bs2: int = ..., auto_restart: bool = ..., baudrate: int = ..., sample_point: int = ...) -> None: ...
    def deinit(self) -> None: ...
    def restart(self) -> Any: ...
    def state(self) -> Any: ...
    def info(self, list: Optional[Any]) -> Any: ...
    def setfilter(self, bank, mode, fifo, params, rtr) -> None: ...
    def clearfilter(self, bank) -> None: ...
    def any(self, fifo) -> bool: ...
    def recv(self, fifo, list: Any | None = ..., *, timeout: int = ...) -> Tuple: ...
    def send(self, data, id, *, timeout: int = ..., rtr: bool = ...) -> None: ...
    def rxcallback(self, fifo, fun) -> None: ...

class DAC:
    def __init__(self, port, bits: int = ..., *, buffering: Any | None = ...) -> None: ...
    def init(self, bits: int = ..., *, buffering: Any | None = ...) -> Any: ...
    def deinit(self) -> Any: ...
    def noise(self, freq) -> None: ...
    def triangle(self, freq) -> None: ...
    def write(self, value) -> Any: ...
    def write_timed(self, data, freq, *, mode=...) -> Any: ...

class ExtInt:
    IRQ_FALLING: Any
    IRQ_RISING: Any
    IRQ_RISING_FALLING: Any
    def __init__(self, pin, mode, pull, callback) -> None: ...
    @classmethod
    def regs(cls) -> Any: ...
    def disable(self) -> None: ...
    def enable(self) -> None: ...
    def line(self) -> int: ...
    def swint(self) -> Any: ...

class Flash:
    def __init__(self) -> None: ...
    def readblocks(self, block_num, buf, offset: Optional[int]) -> Any: ...
    def writeblocks(self, block_num, buf, offset: Optional[int]) -> Any: ...
    def ioctl(self, cmd, arg) -> Any: ...

class I2C:
    CONTROLLER: Any
    PERIPHERAL: Any
    def __init__(self, bus, *args) -> None: ...
    def deinit(self) -> None: ...
    def init(self, mode, *, addr: int = ..., baudrate: int = ..., gencall: bool = ..., dma: bool = ...) -> None: ...
    def is_ready(self, addr) -> Any: ...
    def mem_read(self, data, addr, memaddr, *, timeout: int = ..., addr_size: int = ...) -> Any: ...
    def mem_write(self, data, addr, memaddr, *, timeout: int = ..., addr_size: int = ...) -> None: ...
    def recv(self, recv, addr: int = ..., *, timeout: int = ...) -> bytes: ...
    def send(self, send, addr: int = ..., *, timeout: int = ...) -> None: ...
    def scan(self) -> List: ...

class LCD:
    def __init__(self, skin_position) -> None: ...
    def command(self, instr_data, buf) -> None: ...
    def contrast(self, value) -> None: ...
    def fill(self, colour) -> None: ...
    def get(self, x, y) -> int: ...
    def light(self, value) -> None: ...
    def pixel(self, x, y, colour) -> None: ...
    def show(self) -> None: ...
    def text(self, str, x, y, colour) -> None: ...
    def write(self, str) -> None: ...

class LED:
    def __init__(self, id) -> None: ...
    def intensity(self, value: Optional[Any]) -> None: ...
    def off(self) -> None: ...
    def on(self) -> None: ...
    def toggle(self) -> Any: ...

class Pin:
    AF_OD: Any
    AF_PP: Any
    ANALOG: Any
    IN: Any
    OUT_OD: Any
    OUT_PP: Any
    PULL_DOWN: Any
    PULL_NONE: Any
    PULL_UP: Any
    def __init__(self, id, *args) -> None: ...
    @classmethod
    def debug(cls, state: Optional[Any]) -> bool: ...
    @classmethod
    def dict(cls, dict: Optional[Any]) -> Any: ...
    @classmethod
    def mapper(cls, fun: Optional[Any]) -> Any: ...
    def init(self, mode, pull=..., *, value: Any | None = ..., alt: int = ...) -> None: ...
    def value(self, value: Optional[Any]) -> int: ...
    def __str__(self) -> str: ...
    def af(self) -> Any: ...
    def af_list(self) -> List: ...
    def gpio(self) -> int: ...
    def mode(self) -> Any: ...
    def name(self) -> str: ...
    def names(self) -> str: ...
    def pin(self) -> int: ...
    def port(self) -> Any: ...
    def pull(self) -> Any: ...

class Switch(Pin):
    def __init__(self) -> None: ...
    def __call__(self) -> Any: ...
    def value(self) -> bool: ...
    def callback(self, fun) -> None: ...

class pinaf:
    def __str__(self) -> str: ...
    def index(self) -> int: ...
    def name(self) -> str: ...
    def reg(self) -> Any: ...

class RTC:
    def __init__(self) -> None: ...
    def datetime(self, datetimetuple: Optional[Any]) -> Tuple: ...
    def wakeup(self, timeout, callback: Any | None = ...) -> None: ...
    def info(self) -> Any: ...
    def calibration(self, cal) -> int: ...

class Servo:
    def __init__(self, id) -> None: ...
    def angle(self, angle: Optional[Any], time: int = ...) -> Any: ...
    def speed(self, speed: Optional[Any], time: int = ...) -> Any: ...
    def pulse_width(self, value: Optional[Any]) -> Any: ...
    def calibration(self, pulse_min, pulse_max, pulse_centre, pulse_angle_90, pulse_speed_100) -> Tuple: ...

class SPI:
    CONTROLLER: Any
    PERIPHERAL: Any
    LSB: Any
    MSB: Any
    def __init__(self, bus, *args) -> None: ...
    def deinit(self) -> None: ...
    def init(self, mode, baudrate: int = ..., *, prescaler: int = ..., polarity: int = ..., phase: int = ..., bits: int = ..., firstbit=..., ti: bool = ..., crc: Any | None = ...) -> None: ...
    def recv(self, recv, *, timeout: int = ...) -> bytes: ...
    def send(self, send, *, timeout: int = ...) -> None: ...
    def send_recv(self, send, recv: Any | None = ..., *, timeout: int = ...) -> bytes: ...

class Timer:
    def __init__(self, id, *args) -> None: ...
    def init(self, freq, prescaler, period, *, mode=..., div: int = ..., callback: Any | None = ..., deadtime: int = ...) -> None: ...
    def deinit(self) -> None: ...
    def callback(self, fun) -> None: ...
    def channel(self, channel, mode, *args) -> Any: ...
    def counter(self, value: Optional[Any]) -> Any: ...
    def freq(self, value: Optional[Any]) -> Any: ...
    def period(self, value: Optional[Any]) -> Any: ...
    def prescaler(self, value: Optional[Any]) -> Any: ...
    def source_freq(self) -> Any: ...

class timerchannel:
    def callback(self, fun) -> None: ...
    def capture(self, value: Optional[Any]) -> Any: ...
    def compare(self, value: Optional[Any]) -> Any: ...
    def pulse_width(self, value: Optional[Any]) -> Any: ...
    def pulse_width_percent(self, value: Optional[Any]) -> Any: ...

class UART:
    RTS: Any
    CTS: Any
    def __init__(self, bus, *args) -> None: ...
    def init(self, baudrate, bits: int = ..., parity: Any | None = ..., stop: int = ..., *, timeout: int = ..., flow: int = ..., timeout_char: int = ..., read_buf_len: int = ...) -> Any: ...
    def deinit(self) -> None: ...
    def any(self) -> int: ...
    def read(self, nbytes: Optional[Any]) -> bytes: ...
    def readchar(self) -> int: ...
    def readinto(self, buf, nbytes: Optional[Any]) -> int: ...
    def readline(self) -> None: ...
    def write(self, buf) -> int: ...
    def writechar(self, char) -> None: ...
    def sendbreak(self) -> None: ...

class USB_HID:
    def __init__(self) -> None: ...
    def recv(self, data, *, timeout: int = ...) -> int: ...
    def send(self, data) -> None: ...

class USB_VCP:
    RTS: Any
    CTS: Any
    IRQ_RX: Any
    def __init__(self, id: int = ...) -> None: ...
    def init(self, *, flow: int = ...) -> None: ...
    def setinterrupt(self, chr) -> None: ...
    def isconnected(self) -> bool: ...
    def any(self) -> bool: ...
    def close(self) -> Any: ...
    def read(self, nbytes: Optional[Any]) -> bytes: ...
    def readinto(self, buf, maxlen: Optional[Any]) -> int: ...
    def readline(self) -> bytes: ...
    def readlines(self) -> List: ...
    def write(self, buf) -> int: ...
    def recv(self, data, *, timeout: int = ...) -> int: ...
    def send(self, data, *, timeout: int = ...) -> int: ...
    def irq(self, handler: Any | None = ..., trigger=..., hard: bool = ...) -> None: ...

def delay(ms) -> None: ...
def udelay(us) -> None: ...
def millis() -> int: ...
def micros() -> int: ...
def elapsed_millis(start) -> int: ...
def elapsed_micros(start) -> int: ...
def hard_reset() -> NoReturn: ...
def bootloader() -> None: ...
def fault_debug(value) -> None: ...
def disable_irq() -> Any: ...
def enable_irq(state: bool = ...) -> None: ...
def freq(sysclk, hclk, pclk1, pclk2) -> Tuple: ...
def wfi() -> None: ...
def stop() -> Any: ...
def standby() -> Any: ...
def have_cdc() -> bool: ...
def hid(hidtuple) -> Any: ...
def info(dump_alloc_table: Optional[Any]) -> None: ...
def main(filename) -> None: ...
def mount(device, mountpoint, *, readonly: bool = ..., mkfs: bool = ...) -> Any: ...
def repl_uart(uart) -> UART: ...
def rng() -> int: ...
def sync() -> None: ...
def unique_id() -> str: ...
def usb_mode(modestr: Optional[Any], port: int = ..., vid: int = ..., pid: int = ..., msc=..., hid=..., high_speed: bool = ...) -> str: ...
