from typing import Any, Optional

class PIOASMError: ...

class Flash:
    def __init__(self) -> None: ...
    def readblocks(self, block_num, buf, offset: Optional[int]) -> Any: ...
    def writeblocks(self, block_num, buf, offset: Optional[int]) -> Any: ...
    def ioctl(self, cmd, arg) -> Any: ...

class PIO:
    IN_LOW: Any
    IN_HIGH: Any
    OUT_LOW: Any
    OUT_HIGH: Any
    SHIFT_LEFT: Any
    SHIFT_RIGHT: Any
    JOIN_NONE: Any
    JOIN_TX: Any
    JOIN_RX: Any
    IRQ_SM0: Any
    IRQ_SM1: Any
    IRQ_SM2: Any
    IRQ_SM3: Any
    def __init__(self, id) -> None: ...
    def add_program(self, program) -> Any: ...
    def remove_program(self, program: Optional[Any]) -> None: ...
    def state_machine(self, id, program, *args: Optional[Any]) -> Any: ...
    def irq(self, handler: Any | None = ..., trigger=..., hard: bool = ...) -> Any: ...

class StateMachine:
    def __init__(self, id, program, *args: Optional[Any]) -> None: ...
    def init(self, program, freq: int = ..., *, in_base: Any | None = ..., out_base: Any | None = ..., set_base: Any | None = ..., jmp_pin: Any | None = ..., sideset_base: Any | None = ..., in_shiftdir: Any | None = ..., out_shiftdir: Any | None = ..., push_thresh: Any | None = ..., pull_thresh: Any | None = ...) -> None: ...
    def active(self, value: Optional[Any]) -> Any: ...
    def restart(self) -> Any: ...
    def exec(self, instr) -> Any: ...
    def get(self, buf: Any | None = ..., shift: int = ...) -> Any: ...
    def put(self, value, shift: int = ...) -> Any: ...
    def rx_fifo(self) -> int: ...
    def tx_fifo(self) -> int: ...
    def irq(self, handler: Any | None = ..., trigger=..., hard: bool = ...) -> Any: ...

def asm_pio(*, out_init: Any | None = ..., set_init: Any | None = ..., sideset_init: Any | None = ..., in_shiftdir: int = ..., out_shiftdir: int = ..., autopush: bool = ..., autopull: bool = ..., push_thresh: int = ..., pull_thresh: int = ..., fifo_join=...) -> Any: ...
def asm_pio_encode(instr, sideset_count, sideset_opt: bool = ...) -> Any: ...
